create table "public"."department" (
    "id" bigint generated by default as identity not null,
    "name" text not null
);


alter table "public"."department" enable row level security;

create table "public"."notification" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "type" text not null,
    "title" text not null,
    "content" text not null,
    "is_read" boolean default false,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."notification" enable row level security;

create table "public"."project_members" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "project_id" bigint not null,
    "project_role" text not null
);


alter table "public"."project_members" enable row level security;

create table "public"."project_updates" (
    "id" bigint generated by default as identity not null,
    "project_id" bigint not null,
    "title" text not null,
    "content" text not null,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."project_updates" enable row level security;

create table "public"."projects" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "description" text not null,
    "status" text not null,
    "start_date" date,
    "end_date" date
);


alter table "public"."projects" enable row level security;

create table "public"."role" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "role_name" text not null
);


alter table "public"."role" enable row level security;

create table "public"."users" (
    "id" uuid not null default auth.uid(),
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "phone" text not null,
    "role_id" bigint not null,
    "department_id" bigint not null,
    "avatar_url" text
);


alter table "public"."users" enable row level security;

CREATE UNIQUE INDEX "Department_pkey" ON public.department USING btree (id);

CREATE UNIQUE INDEX "Project_Members_pkey" ON public.project_members USING btree (id);

CREATE UNIQUE INDEX "Projects_pkey" ON public.projects USING btree (id);

CREATE UNIQUE INDEX "Role_pkey" ON public.role USING btree (id);

CREATE UNIQUE INDEX "Users_pkey" ON public.users USING btree (id);

CREATE UNIQUE INDEX notification_pkey ON public.notification USING btree (id);

CREATE UNIQUE INDEX project_updates_pkey ON public.project_updates USING btree (id);

alter table "public"."department" add constraint "Department_pkey" PRIMARY KEY using index "Department_pkey";

alter table "public"."notification" add constraint "notification_pkey" PRIMARY KEY using index "notification_pkey";

alter table "public"."project_members" add constraint "Project_Members_pkey" PRIMARY KEY using index "Project_Members_pkey";

alter table "public"."project_updates" add constraint "project_updates_pkey" PRIMARY KEY using index "project_updates_pkey";

alter table "public"."projects" add constraint "Projects_pkey" PRIMARY KEY using index "Projects_pkey";

alter table "public"."role" add constraint "Role_pkey" PRIMARY KEY using index "Role_pkey";

alter table "public"."users" add constraint "Users_pkey" PRIMARY KEY using index "Users_pkey";

alter table "public"."notification" add constraint "notification_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE not valid;

alter table "public"."notification" validate constraint "notification_user_id_fkey";

alter table "public"."project_members" add constraint "project_members_project_id_fkey" FOREIGN KEY (project_id) REFERENCES projects(id) not valid;

alter table "public"."project_members" validate constraint "project_members_project_id_fkey";

alter table "public"."project_members" add constraint "project_members_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE not valid;

alter table "public"."project_members" validate constraint "project_members_user_id_fkey";

alter table "public"."project_updates" add constraint "project_updates_project_id_fkey" FOREIGN KEY (project_id) REFERENCES projects(id) not valid;

alter table "public"."project_updates" validate constraint "project_updates_project_id_fkey";

alter table "public"."users" add constraint "Users_department_id_fkey" FOREIGN KEY (department_id) REFERENCES department(id) not valid;

alter table "public"."users" validate constraint "Users_department_id_fkey";

alter table "public"."users" add constraint "Users_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."users" validate constraint "Users_id_fkey";

alter table "public"."users" add constraint "Users_role_id_fkey" FOREIGN KEY (role_id) REFERENCES role(id) not valid;

alter table "public"."users" validate constraint "Users_role_id_fkey";

create or replace view "public"."members_with_dep" as  SELECT u.id AS user_id,
    u.name,
    u.phone,
    u.avatar_url,
    a.email,
    d.name AS department_name,
    d.id AS department_id
   FROM ((users u
     JOIN auth.users a ON ((u.id = a.id)))
     JOIN department d ON ((d.id = u.department_id)));


create or replace view "public"."profile_with_projects" as  SELECT p.id,
    p.name,
    p.phone,
    p.avatar_url,
    u.email,
    d.name AS department_name,
    pm.project_role,
    pm.project_id,
    pr.name AS project_name,
    pr.description,
    pr.status
   FROM ((((users p
     LEFT JOIN auth.users u ON ((p.id = u.id)))
     LEFT JOIN department d ON ((d.id = p.department_id)))
     LEFT JOIN project_members pm ON ((pm.user_id = p.id)))
     LEFT JOIN projects pr ON ((pr.id = pm.project_id)));


create or replace view "public"."profile_with_projects_json" as  SELECT p.id,
    p.name,
    p.phone,
    p.avatar_url,
    u.email,
    d.name AS department_name,
    COALESCE(json_agg(json_build_object('project_id', pr.id, 'project_name', pr.name, 'description', pr.description, 'status', pr.status, 'project_role', pm.project_role)) FILTER (WHERE (pr.id IS NOT NULL)), '[]'::json) AS projects
   FROM ((((users p
     LEFT JOIN auth.users u ON ((p.id = u.id)))
     LEFT JOIN department d ON ((d.id = p.department_id)))
     LEFT JOIN project_members pm ON ((pm.user_id = p.id)))
     LEFT JOIN projects pr ON ((pr.id = pm.project_id)))
  GROUP BY p.id, p.name, p.phone, p.avatar_url, u.email, d.name;


create or replace view "public"."profiles_full" as  SELECT p.id AS profile_id,
    p.name,
    p.phone,
    u.email,
    d.name AS department_name
   FROM ((users p
     LEFT JOIN auth.users u ON ((u.id = p.id)))
     LEFT JOIN department d ON ((d.id = p.department_id)));


create policy "Enable read access for all users"
on "public"."department"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."project_members"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."project_updates"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for all users"
on "public"."project_updates"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."projects"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."role"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."users"
as permissive
for select
to public
using (true);



